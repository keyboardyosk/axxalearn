import os
import logging
from datetime import datetime, timedelta, time
from calendar import monthrange, weekday
from aiogram import Bot, Dispatcher, types
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, WebAppInfo
from aiogram.enums import ChatAction
from aiogram.filters import Command
import asyncpg
from dotenv import load_dotenv
import asyncio
import sys
import random

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
DATABASE_URL = os.getenv("DATABASE_URL")
ADMIN_ID = int(os.getenv("ADMIN_ID", "0"))
WEBAPP_URL = os.getenv("WEBAPP_URL", "https://axxalearn.up.railway.app")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async def get_db_connection():
    try:
        conn = await asyncpg.connect(DATABASE_URL)
        return conn
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î: {e}")
        raise

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
async def init_db():
    conn = await get_db_connection()
    try:
        await conn.execute("""
            CREATE TABLE IF NOT EXISTS users (
                telegram_id BIGINT PRIMARY KEY,
                username TEXT,
                full_name TEXT,
                role TEXT DEFAULT 'student',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)

        await conn.execute("""
            CREATE TABLE IF NOT EXISTS bookings (
                id SERIAL PRIMARY KEY,
                user_id BIGINT REFERENCES users(telegram_id),
                subject TEXT NOT NULL,
                booking_date DATE NOT NULL,
                booking_time TIME NOT NULL,
                phone TEXT,
                status TEXT DEFAULT 'confirmed',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)

        await conn.execute("""
            CREATE TABLE IF NOT EXISTS quiz_progress (
                id SERIAL PRIMARY KEY,
                user_id BIGINT REFERENCES users(telegram_id),
                subject TEXT NOT NULL,
                score INTEGER DEFAULT 0,
                total_questions INTEGER DEFAULT 0,
                completed_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)

        await conn.execute("""
            CREATE TABLE IF NOT EXISTS schedule (
                id SERIAL PRIMARY KEY,
                user_id BIGINT REFERENCES users(telegram_id),
                subject TEXT NOT NULL,
                lesson_date DATE NOT NULL,
                lesson_time TIME NOT NULL,
                status TEXT DEFAULT 'scheduled',
                created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)

        logger.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î: {e}")
        raise
    finally:
        await conn.close()

# FSM —Å–æ—Å—Ç–æ—è–Ω–∏—è
class BookingState(StatesGroup):
    waiting_for_subject = State()
    waiting_for_date = State()
    waiting_for_time = State()
    waiting_for_phone = State()
    waiting_for_confirmation = State()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏
def build_subject_calendar(current_date, subject):
    today = datetime.now()
    year = current_date.year
    month = current_date.month
    month_name = current_date.strftime("%B")
    days_in_month = monthrange(year, month)[1]
    first_day = weekday(year, month, 1)
    calendar = []

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω—É–∂–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    if subject == "science":
        allowed_weekday = 2  # —Å—Ä–µ–¥–∞ (0=–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫)
        subject_name = "–ù–∞—É–∫–∞"
    elif subject == "programming":
        allowed_weekday = 4  # –ø—è—Ç–Ω–∏—Ü–∞
        subject_name = "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"
    else:
        allowed_weekday = None
        subject_name = "–ü—Ä–µ–¥–º–µ—Ç"

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
    prev_month = current_date - timedelta(days=30)
    next_month = current_date + timedelta(days=30)

    if current_date <= today.replace(day=1, hour=0, minute=0, second=0, microsecond=0):
        prev_button = InlineKeyboardButton(text="‚óÄÔ∏è", callback_data="ignore")
    else:
        prev_button = InlineKeyboardButton(text="‚óÄÔ∏è", callback_data=f"prev_{subject}_{prev_month.year}_{prev_month.month}")

    header = [
        InlineKeyboardButton(text=f"{subject_name}", callback_data="ignore"),
        InlineKeyboardButton(text=f"{month_name} {year}", callback_data="ignore"),
        prev_button,
        InlineKeyboardButton(text="‚ñ∂Ô∏è", callback_data=f"next_{subject}_{next_month.year}_{next_month.month}")
    ]
    calendar.append(header)

    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    days_of_week = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    calendar.append([InlineKeyboardButton(text=day, callback_data="ignore") for day in days_of_week])

    # –î–Ω–∏ –º–µ—Å—è—Ü–∞
    week = []
    for _ in range(first_day):
        week.append(InlineKeyboardButton(text=" ", callback_data="ignore"))

    for day in range(1, days_in_month + 1):
        current_day = datetime(year, month, day)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º: –¥–µ–Ω—å –≤ –ø—Ä–æ—à–ª–æ–º –∏–ª–∏ –Ω–µ —Ç–æ—Ç –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        if current_day < today or (allowed_weekday is not None and current_day.weekday() != allowed_weekday):
            week.append(InlineKeyboardButton(text="¬∑", callback_data="ignore"))
        else:
            week.append(InlineKeyboardButton(text=str(day), callback_data=f"date_{subject}_{year}_{month}_{day}"))

        if (first_day + day - 1) % 7 == 6:  # –ö–æ–Ω–µ—Ü –Ω–µ–¥–µ–ª–∏
            calendar.append(week)
            week = []

    if week:
        while len(week) < 7:
            week.append(InlineKeyboardButton(text=" ", callback_data="ignore"))
        calendar.append(week)

    return InlineKeyboardMarkup(inline_keyboard=calendar)

# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_menu():
    keyboard = [
        [InlineKeyboardButton(text="üìö –ü—Ä–æ–π—Ç–∏ –¥–æ–º–∞—à–∫—É", web_app=WebAppInfo(url=f"{WEBAPP_URL}/quiz"))],
        [InlineKeyboardButton(text="üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ", callback_data="book_lesson")],
        [InlineKeyboardButton(text="üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å", web_app=WebAppInfo(url=f"{WEBAPP_URL}/progress"))],
        [InlineKeyboardButton(text="üóì –ú–æ—ë —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ", web_app=WebAppInfo(url=f"{WEBAPP_URL}/schedule"))],
        [InlineKeyboardButton(text="üéØ –°–µ–∫—Ä–µ—Ç–Ω—ã–π —Ä–∞–∑–¥–µ–ª", web_app=WebAppInfo(url=f"{WEBAPP_URL}/secret"))]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏
def get_subject_menu():
    keyboard = [
        [InlineKeyboardButton(text="üß™ –ù–∞—É–∫–∞ (—Å—Ä–µ–¥–∞)", callback_data="subject_science")],
        [InlineKeyboardButton(text="üíª –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ (–ø—è—Ç–Ω–∏—Ü–∞)", callback_data="subject_programming")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏
def get_time_menu(subject):
    times = ["16:00", "17:00", "18:00", "19:00", "20:00"]
    keyboard = []
    for time_slot in times:
        keyboard.append([InlineKeyboardButton(text=f"üïê {time_slot}", callback_data=f"time_{subject}_{time_slot}")])
    keyboard.append([InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é", callback_data=f"back_to_calendar_{subject}")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def start_command(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    username = message.from_user.username
    full_name = message.from_user.full_name

    await state.clear()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    conn = await get_db_connection()
    try:
        await conn.execute(
            "INSERT INTO users (telegram_id, username, full_name) VALUES ($1, $2, $3) ON CONFLICT (telegram_id) DO UPDATE SET username = $2, full_name = $3",
            user_id, username, full_name
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({username}) —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –ë–î")
    finally:
        await conn.close()

    welcome_text = f"""
üéì –ü—Ä–∏–≤–µ—Ç, {full_name}! 

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫! 

–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å:
‚Ä¢ –ü—Ä–æ—Ö–æ–¥–∏—Ç—å –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –≤ –≤–∏–¥–µ –∫–≤–∏–∑–æ–≤
‚Ä¢ –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å—Å—è –Ω–∞ –∑–∞–Ω—è—Ç–∏—è
‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å
‚Ä¢ –°–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
‚Ä¢ –û—Ç–∫—Ä—ã—Ç—å —Å–µ–∫—Ä–µ—Ç–Ω—ã–π —Ä–∞–∑–¥–µ–ª üéØ

–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:
    """

    await message.answer(welcome_text, reply_markup=get_main_menu())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø–∏—Å–∏ –Ω–∞ –∑–∞–Ω—è—Ç–∏–µ
@dp.callback_query(lambda c: c.data == "book_lesson")
async def book_lesson_start(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text(
    "üìÖ –í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –∑–∞–ø–∏—Å–∏:\n"
    "üß™ –ù–∞—É–∫–∞ ‚Äî –ø–æ —Å—Ä–µ–¥–∞–º\n"
    "üíª –ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ ‚Äî –ø–æ –ø—è—Ç–Ω–∏—Ü–∞–º",
    reply_markup=get_subject_menu()
)
    await state.set_state(BookingState.waiting_for_subject)
    await callback_query.answer()

# –í—ã–±–æ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞
@dp.callback_query(lambda c: c.data.startswith("subject_"))
async def select_subject(callback_query: types.CallbackQuery, state: FSMContext):
    subject = callback_query.data.split("_")[1]  # science –∏–ª–∏ programming
    await state.update_data(subject=subject)

    subject_names = {"science": "–ù–∞—É–∫–∞", "programming": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"}
    subject_days = {"science": "—Å—Ä–µ–¥—ã", "programming": "–ø—è—Ç–Ω–∏—Ü—ã"}

    current_date = datetime.now()
    calendar_markup = build_subject_calendar(current_date, subject)

    await callback_query.message.edit_text(
        f"üìÖ –í—ã–±–µ—Ä–∏ –¥–∞—Ç—É –¥–ª—è –∑–∞–Ω—è—Ç–∏—è –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject_names[subject]}
"
        f"–î–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ {subject_days[subject]}:",
        reply_markup=calendar_markup
    )
    await state.set_state(BookingState.waiting_for_date)
    await callback_query.answer()

# –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—é
@dp.callback_query(lambda c: c.data.startswith("prev_") or c.data.startswith("next_"))
async def navigate_calendar(callback_query: types.CallbackQuery, state: FSMContext):
    data_parts = callback_query.data.split("_")
    direction = data_parts[0]  # prev –∏–ª–∏ next
    subject = data_parts[1]
    year = int(data_parts[2])
    month = int(data_parts[3])

    current_date = datetime(year, month, 1)
    calendar_markup = build_subject_calendar(current_date, subject)

    subject_names = {"science": "–ù–∞—É–∫–∞", "programming": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"}
    subject_days = {"science": "—Å—Ä–µ–¥—ã", "programming": "–ø—è—Ç–Ω–∏—Ü—ã"}

    await callback_query.message.edit_reply_markup(reply_markup=calendar_markup)
    await callback_query.answer()

# –í—ã–±–æ—Ä –¥–∞—Ç—ã
@dp.callback_query(lambda c: c.data.startswith("date_"))
async def select_date(callback_query: types.CallbackQuery, state: FSMContext):
    data_parts = callback_query.data.split("_")
    subject = data_parts[1]
    year = int(data_parts[2])
    month = int(data_parts[3])
    day = int(data_parts[4])

    selected_date = datetime(year, month, day)
    await state.update_data(booking_date=selected_date)

    subject_names = {"science": "–ù–∞—É–∫–∞", "programming": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"}

    await callback_query.message.edit_text(
        f"üïê –í—ã–±–µ—Ä–∏ –≤—Ä–µ–º—è –¥–ª—è –∑–∞–Ω—è—Ç–∏—è –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject_names[subject]}
"
        f"üìÖ –î–∞—Ç–∞: {selected_date.strftime('%d.%m.%Y')} ({selected_date.strftime('%A')})",
        reply_markup=get_time_menu(subject)
    )
    await state.set_state(BookingState.waiting_for_time)
    await callback_query.answer()

# –í—ã–±–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
@dp.callback_query(lambda c: c.data.startswith("time_"))
async def select_time(callback_query: types.CallbackQuery, state: FSMContext):
    data_parts = callback_query.data.split("_")
    subject = data_parts[1]
    selected_time = data_parts[2]

    await state.update_data(booking_time=selected_time)

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
    phone_keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="üì± –ü–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º", request_contact=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    await callback_query.message.answer(
        "üì± –ü–æ–¥–µ–ª–∏—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏:",
        reply_markup=phone_keyboard
    )
    await state.set_state(BookingState.waiting_for_phone)
    await callback_query.answer()

# –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞
@dp.message(BookingState.waiting_for_phone)
async def get_phone(message: types.Message, state: FSMContext):
    phone = None

    if message.contact:
        phone = message.contact.phone_number
    elif message.text and message.text.replace("+", "").replace(" ", "").replace("-", "").isdigit():
        phone = message.text
    else:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Å—å –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –≤–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä")
        return

    await state.update_data(phone=phone)

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    data = await state.get_data()
    subject = data["subject"]
    booking_date = data["booking_date"]
    booking_time = data["booking_time"]

    subject_names = {"science": "–ù–∞—É–∫–∞", "programming": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"}

    confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="confirm_booking")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_booking")]
    ])

    confirmation_text = f"""
üìã –ü–æ–¥—Ç–≤–µ—Ä–¥–∏ –∑–∞–ø–∏—Å—å:

üë§ –ò–º—è: {message.from_user.full_name}
üìö –ü—Ä–µ–¥–º–µ—Ç: {subject_names[subject]}
üìÖ –î–∞—Ç–∞: {booking_date.strftime('%d.%m.%Y')} ({booking_date.strftime('%A')})
üïê –í—Ä–µ–º—è: {booking_time}
üì± –¢–µ–ª–µ—Ñ–æ–Ω: {phone}

–í—Å—ë –≤–µ—Ä–Ω–æ?
    """

    await message.answer(
        confirmation_text,
        reply_markup=confirm_keyboard,
        reply_keyboard_remove=True
    )
    await state.set_state(BookingState.waiting_for_confirmation)

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
@dp.callback_query(lambda c: c.data == "confirm_booking")
async def confirm_booking(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    data = await state.get_data()

    subject = data["subject"]
    booking_date = data["booking_date"]
    booking_time = data["booking_time"]
    phone = data["phone"]

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    conn = await get_db_connection()
    try:
        await conn.execute(
            "INSERT INTO bookings (user_id, subject, booking_date, booking_time, phone) VALUES ($1, $2, $3, $4, $5)",
            user_id, subject, booking_date.date(), time.fromisoformat(booking_time), phone
        )
        logger.info(f"–ó–∞–ø–∏—Å—å —Å–æ–∑–¥–∞–Ω–∞: {user_id} - {subject} - {booking_date} - {booking_time}")
    finally:
        await conn.close()

    subject_names = {"science": "–ù–∞—É–∫–∞", "programming": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"}

    success_text = f"""
‚úÖ –ó–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞!

üìö {subject_names[subject]}
üìÖ {booking_date.strftime('%d.%m.%Y')} –≤ {booking_time}

–ú—ã –æ—Ç–ø—Ä–∞–≤–∏–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∑–∞ –¥–µ–Ω—å –¥–æ –∑–∞–Ω—è—Ç–∏—è.
–£–≤–∏–¥–∏–º—Å—è –Ω–∞ —É—Ä–æ–∫–µ! üéì
    """

    await callback_query.message.edit_text(success_text, reply_markup=get_main_menu())
    await state.clear()
    await callback_query.answer("–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞! ‚úÖ")

# –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏
@dp.callback_query(lambda c: c.data == "cancel_booking")
async def cancel_booking(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text(
        "‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.

–ú–æ–∂–µ—à—å –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è!",
        reply_markup=get_main_menu()
    )
    await state.clear()
    await callback_query.answer("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞")

# –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
@dp.callback_query(lambda c: c.data == "back_to_main")
async def back_to_main(callback_query: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback_query.message.edit_text(
        "üéì –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:",
        reply_markup=get_main_menu()
    )
    await callback_query.answer()

# –í–æ–∑–≤—Ä–∞—Ç –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é
@dp.callback_query(lambda c: c.data.startswith("back_to_calendar_"))
async def back_to_calendar(callback_query: types.CallbackQuery, state: FSMContext):
    subject = callback_query.data.split("_")[3]

    current_date = datetime.now()
    calendar_markup = build_subject_calendar(current_date, subject)

    subject_names = {"science": "–ù–∞—É–∫–∞", "programming": "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"}
    subject_days = {"science": "—Å—Ä–µ–¥—ã", "programming": "–ø—è—Ç–Ω–∏—Ü—ã"}

    await callback_query.message.edit_text(
        f"üìÖ –í—ã–±–µ—Ä–∏ –¥–∞—Ç—É –¥–ª—è –∑–∞–Ω—è—Ç–∏—è –ø–æ –ø—Ä–µ–¥–º–µ—Ç—É {subject_names[subject]}
"
        f"–î–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ {subject_days[subject]}:",
        reply_markup=calendar_markup
    )
    await state.set_state(BookingState.waiting_for_date)
    await callback_query.answer()

# –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—É—Å—Ç—ã—Ö –∫–Ω–æ–ø–æ–∫
@dp.callback_query(lambda c: c.data == "ignore")
async def ignore_callback(callback_query: types.CallbackQuery):
    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é)
@dp.message()
async def handle_text(message: types.Message, state: FSMContext):
    current_state = await state.get_state()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –∑–∞–ø–∏—Å–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    if current_state is None:
        await message.answer(
            "üéì –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:",
            reply_markup=get_main_menu()
        )

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    logger.info("–ó–∞–ø—É—Å–∫ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–æ–≥–æ –±–æ—Ç–∞...")
    await init_db()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
